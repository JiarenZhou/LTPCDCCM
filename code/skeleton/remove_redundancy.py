import open3d as o3d
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
from collections import deque

# 读取点云数据

import numpy as np
def find_connected_components(graph):
    connected_components = []
    visited = set()

    for node in graph.nodes():
        if node not in visited:
            component = bfs(graph, node)
            connected_components.append(component)
            visited.update(component)

    return connected_components


def bfs(graph, start_node):
    visited = set()
    visited.add(start_node)
    queue = deque([start_node])
    connected_component = []

    while queue:
        node = queue.popleft()
        connected_component.append(node)

        for neighbor in graph.neighbors(node):
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)

    return connected_component

def common_elements_ratio(listA, listB):
    # 计算两个列表的交集
    intersection = set(listA) & set(listB)

    # 计算交集中元素在listB中的数量
    count_in_B = sum(1 for element in intersection if element in listB)

    # 计算公共元素在listB中所占比例
    ratio = count_in_B / len(listB)

    return ratio
if __name__ == '__main__':
    # A619-1-1-8.1
    nodes=[0, 12, 27, 1, 20, 16, 3, 9, 40, 4, 36, 8, 11, 10, 15, 7, 14, 28, 17, 35, 18, 32, 19, 5, 22, 21, 23, 38, 25, 24, 31, 13, 30, 6, 34, 33, 26, 95, 104, 37, 29, 2, 39, 46, 41, 42, 43, 49, 56, 47, 55, 48, 50, 54, 51, 44, 52, 53, 45, 58, 57, 59, 60, 115, 61, 78, 86, 62, 117, 118, 63, 70, 64, 77, 65, 100, 67, 69, 96, 71, 106, 74, 107, 75, 114, 76, 80, 88, 81, 73, 93, 82, 113, 83, 68, 84, 122, 85, 120, 87, 101, 89, 121, 90, 79, 103, 91, 92, 97, 301, 98, 94, 99, 110, 66, 102, 126, 105, 111, 108, 109, 128, 112, 116, 119, 149, 123, 72, 124, 125, 127, 129, 130, 222, 308, 131, 314, 132, 271, 232, 133, 146, 134, 142, 135, 188, 168, 138, 174, 332, 139, 178, 140, 191, 141, 305, 197, 281, 143, 236, 333, 145, 173, 148, 272, 262, 150, 137, 170, 151, 379, 235, 152, 274, 154, 156, 321, 228, 158, 244, 280, 160, 177, 162, 319, 164, 185, 166, 255, 315, 172, 316, 211, 176, 279, 214, 230, 157, 179, 180, 326, 198, 181, 205, 182, 258, 163, 184, 263, 264, 186, 309, 261, 187, 175, 338, 318, 189, 208, 190, 265, 193, 192, 194, 207, 273, 195, 249, 196, 202, 252, 199, 233, 257, 200, 201, 239, 246, 203, 284, 204, 225, 206, 278, 291, 209, 251, 210, 212, 294, 213, 242, 289, 215, 216, 171, 217, 218, 240, 229, 219, 227, 220, 221, 223, 293, 224, 254, 330, 298, 226, 387, 231, 306, 234, 136, 237, 238, 286, 241, 302, 243, 183, 323, 245, 260, 247, 250, 253, 256, 266, 269, 267, 268, 270, 313, 328, 275, 276, 324, 277, 147, 282, 307, 283, 288, 165, 285, 169, 248, 155, 287, 290, 322, 292, 295, 296, 259, 297, 161, 299, 303, 304, 153, 144, 310, 311, 312, 167, 317, 320, 325, 327, 300, 329, 331, 334, 340, 335, 336, 337, 339, 342, 349, 352, 343, 348, 344, 351, 353, 345, 346, 347, 350, 354, 341, 356, 366, 374, 359, 360, 358, 368, 361, 377, 362, 355, 363, 373, 364, 357, 369, 365, 372, 367, 370, 375, 376, 378, 382, 159, 380, 371, 381, 383, 386, 384, 389, 390, 385, 388]
    edges=[(0, 12), (0, 27), (12, 17), (27, 8), (1, 20), (1, 16), (20, 5), (16, 8), (3, 9), (3, 40), (9, 11), (40, 33), (4, 36), (4, 39), (36, 26), (11, 22), (10, 15), (10, 7), (10, 14), (15, 28), (14, 42), (28, 13), (17, 35), (35, 95), (35, 104), (18, 32), (18, 19), (32, 33), (32, 6), (19, 24), (5, 24), (22, 21), (21, 31), (23, 38), (23, 25), (38, 2), (25, 31), (30, 6), (30, 34), (34, 26), (33, 37), (95, 106), (104, 87), (37, 29), (29, 42), (2, 41), (39, 46), (46, 56), (41, 48), (43, 49), (43, 57), (49, 59), (56, 58), (47, 55), (47, 54), (55, 45), (48, 50), (50, 54), (51, 44), (51, 57), (44, 58), (52, 53), (53, 59), (60, 115), (60, 103), (115, 82), (61, 78), (61, 86), (78, 67), (86, 80), (62, 117), (62, 118), (117, 108), (118, 67), (63, 70), (63, 129), (70, 109), (64, 77), (77, 76), (65, 100), (65, 92), (100, 66), (69, 96), (69, 114), (96, 85), (71, 106), (71, 107), (74, 107), (74, 75), (75, 114), (76, 112), (80, 88), (88, 91), (81, 73), (81, 93), (73, 116), (93, 105), (82, 113), (113, 92), (83, 68), (83, 101), (68, 98), (84, 122), (84, 89), (122, 124), (85, 120), (120, 123), (87, 101), (89, 121), (121, 112), (90, 79), (90, 103), (79, 116), (91, 99), (92, 125), (97, 301), (97, 268), (301, 154), (98, 94), (94, 149), (99, 110), (110, 102), (66, 128), (102, 126), (126, 124), (105, 111), (111, 108), (109, 128), (119, 149), (119, 154), (123, 72), (72, 127), (127, 129), (130, 222), (130, 308), (222, 299), (308, 247), (131, 314), (131, 269), (314, 237), (132, 271), (132, 232), (271, 179), (232, 238), (133, 146), (133, 296), (146, 253), (134, 142), (134, 234), (142, 281), (135, 188), (135, 168), (188, 318), (168, 220), (138, 174), (138, 332), (174, 252), (332, 145), (139, 178), (139, 221), (178, 157), (140, 191), (140, 290), (140, 312), (191, 318), (141, 305), (141, 197), (305, 315), (197, 295), (281, 147), (143, 236), (143, 333), (236, 247), (333, 338), (145, 173), (173, 226), (148, 272), (148, 262), (272, 209), (262, 329), (150, 137), (150, 170), (137, 382), (170, 217), (151, 379), (151, 235), (379, 304), (379, 159), (235, 293), (152, 274), (152, 245), (274, 328), (156, 321), (156, 228), (321, 226), (228, 265), (158, 244), (158, 280), (244, 311), (280, 275), (160, 177), (160, 203), (177, 214), (177, 230), (162, 319), (162, 329), (319, 279), (164, 185), (164, 220), (185, 201), (166, 255), (166, 315), (255, 181), (315, 167), (172, 316), (172, 211), (316, 284), (211, 294), (176, 279), (176, 310), (214, 289), (230, 273), (157, 295), (179, 256), (180, 326), (180, 198), (326, 169), (198, 239), (181, 205), (205, 213), (182, 258), (182, 163), (258, 249), (163, 292), (184, 263), (184, 264), (263, 227), (264, 200), (186, 309), (186, 261), (309, 144), (261, 250), (187, 175), (187, 338), (175, 303), (189, 208), (189, 297), (208, 277), (190, 265), (190, 254), (193, 192), (193, 317), (192, 320), (194, 207), (194, 273), (207, 268), (195, 249), (195, 331), (196, 202), (196, 252), (202, 246), (199, 233), (199, 257), (233, 327), (257, 278), (200, 231), (201, 239), (246, 260), (203, 284), (204, 225), (204, 277), (225, 298), (206, 278), (206, 291), (291, 313), (209, 251), (251, 215), (210, 212), (210, 216), (212, 299), (294, 250), (213, 242), (242, 325), (289, 165), (215, 275), (216, 171), (171, 241), (217, 388), (218, 240), (218, 229), (240, 306), (229, 307), (219, 227), (219, 223), (227, 387), (221, 245), (223, 293), (224, 254), (224, 330), (330, 136), (298, 237), (231, 306), (234, 136), (238, 286), (286, 155), (241, 302), (302, 292), (243, 183), (243, 323), (183, 310), (323, 267), (260, 253), (256, 327), (266, 269), (266, 267), (270, 313), (270, 288), (328, 300), (276, 324), (276, 287), (324, 147), (282, 307), (282, 311), (283, 288), (283, 165), (285, 169), (285, 248), (248, 287), (155, 325), (290, 322), (322, 161), (296, 259), (259, 320), (297, 161), (303, 339), (304, 153), (153, 388), (144, 312), (300, 331), (334, 340), (340, 336), (335, 336), (335, 337), (337, 339), (342, 349), (342, 352), (349, 350), (352, 348), (343, 348), (343, 351), (344, 351), (344, 353), (345, 346), (345, 347), (346, 350), (347, 354), (354, 341), (341, 359), (356, 366), (356, 374), (366, 372), (374, 365), (359, 370), (360, 358), (360, 368), (358, 361), (368, 372), (361, 377), (377, 376), (362, 355), (362, 363), (355, 376), (363, 373), (373, 367), (364, 357), (364, 369), (357, 375), (369, 365), (367, 370), (375, 385), (378, 382), (378, 381), (380, 371), (380, 389), (381, 386), (383, 386), (383, 389), (384, 389), (384, 390), (390, 385)]
    # D21020-1-1-7.24
    # nodes=[0, 64, 46, 2, 16, 41, 3, 50, 4, 22, 1, 11, 6, 26, 5, 7, 8, 9, 17, 10, 15, 14, 18, 19, 13, 12, 20, 21, 23, 24, 65, 27, 60, 28, 32, 29, 39, 30, 25, 31, 52, 45, 34, 44, 35, 37, 42, 40, 48, 36, 57, 43, 49, 56, 47, 33, 53, 54, 55, 59, 58, 61, 62, 38, 63, 51]
    # edges=[(0, 64), (0, 46), (64, 51), (64, 65), (46, 56), (2, 16), (2, 41), (2, 30), (16, 8), (41, 57), (3, 50), (3, 57), (50, 22), (4, 22), (4, 1), (4, 11), (1, 23), (11, 10), (6, 26), (6, 5), (26, 53), (5, 7), (7, 8), (9, 17), (9, 18), (17, 35), (10, 55), (15, 14), (14, 58), (18, 53), (19, 13), (19, 12), (13, 58), (12, 35), (20, 21), (20, 24), (21, 23), (24, 65), (65, 49), (27, 60), (27, 47), (60, 62), (28, 32), (28, 47), (32, 45), (29, 39), (29, 54), (39, 31), (39, 45), (30, 25), (25, 54), (31, 52), (52, 33), (34, 44), (34, 63), (44, 42), (37, 42), (37, 48), (40, 48), (40, 36), (36, 47), (43, 49), (56, 59), (59, 61), (61, 38)]
  # 创建一个空的无向图
    graph = nx.Graph()
    # 添加节点
    graph.add_nodes_from(nodes)
    # 添加边
    graph.add_edges_from(edges)
    print(graph)
    connected_components = find_connected_components(graph)
    largest_component = max(connected_components, key=len)
    print(connected_components)
    print(largest_component)
    print(len(largest_component))
    point_cloud = o3d.io.read_point_cloud("E:\A619-1-1-8.1/02_skeleton_LBC.ply")

    zmax=0
    points=np.asarray(point_cloud.points)
    zmax_lit=-1
    for i in range(points.shape[0]):
        if abs(points[i][2])>zmax:
            zmax=abs(points[i][2])
            zmax_lit=i
    print(zmax)
    print(zmax_lit)
    a=list(graph.edges)
    b=[]
    for i in range(len(a)):
        for num in a[i]:
            b.append(num)
    dict={}
    for key in b:
        dict[key]=dict.get(key,0)+1
    leaf_list=[]
    for key,value in dict.items():
        if value==1:
            leaf_list.append(int(key))
    if zmax_lit in leaf_list:
        leaf_list.remove(zmax_lit)
    print('leaf_list',leaf_list)
    print(len(leaf_list))

    road_list=[]
    for i in range(len(leaf_list)):
        road_temp=nx.shortest_path(graph,leaf_list[i],zmax_lit)
        road_list.append(road_temp)
    print(road_list)
    print(len(road_list))

    remove_list=[]
    for i in range(len(road_list)):
        for j in range(i,len(road_list)):
            if i!=j and i not in remove_list and j not in remove_list:
                if common_elements_ratio(road_list[i],road_list[j])>=0.75:
                    # print('比较：',i,j)
                    if len(road_list[i])>len(road_list[j]) and len(road_list[i])/len(road_list[j])<2 :
                        remove_list.append(j)
                        print('比较：',i,j,'删除：',  j)
                    elif len(road_list[i])<len(road_list[j]) and len(road_list[j])/len(road_list[i])<2:
                        remove_list.append(i)
                        print('比较：', i, j, '删除：', i)
    remove_list=unique_list = list(set(remove_list))
    print('remove_list',remove_list)
    print(len(remove_list))
    result = [elem for i, elem in enumerate(road_list) if i not in remove_list]
    # for i in range(0,len(road_list)):
    #     if i not in remove_list:
    #         # print(i)
    #         result.append(road_list[i])
    print('result',result)
    print(len(result))

    # result = [[13, 28, 15, 10, 7], [1, 2, 3]]
    newgraph = nx.Graph()

    # 遍历列表中的每个子列表
    for sublist in result:
        # 遍历子列表中的相邻元素
        for i in range(len(sublist) - 1):
            # 添加边到图中
            newgraph.add_edge(sublist[i], sublist[i + 1])

    print(graph)
    print(newgraph)
    # print(newgraph.nodes())
    # print(type(newgraph.nodes()))
    indices=list(newgraph.nodes())
    inlier_cloud = point_cloud.select_by_index(indices)
    # o3d.io.write_point_cloud(r"E:\D21020-1-1-7.24\new02_skeleton_LBC.ply", inlier_cloud)

    o3d.io.write_point_cloud(r"E:\A619-1-1-8.1\new02_skeleton_LBC.ply", inlier_cloud)
    o3d.visualization.draw_geometries([point_cloud], window_name="原始点云",
                                      width=1024, height=768,
                                      left=50, top=50,
                                      mesh_show_back_face=False)
    o3d.visualization.draw_geometries([inlier_cloud], window_name="去冗后点云",
                                      width=1024, height=768,
                                      left=50, top=50,
                                      mesh_show_back_face=False)






